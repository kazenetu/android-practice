apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-parcelize'
apply plugin: 'kotlin-kapt'
apply plugin: 'com.google.android.gms.oss-licenses-plugin'

android {
    compileSdkVersion 30
    buildToolsVersion "30.0.3"

    defaultConfig {
        applicationId "com.github.kazenetu.listview"
        minSdkVersion 16
        targetSdkVersion 30
        versionCode 1
        versionName "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = ["room.incremental":"true"]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }

    buildFeatures {
        viewBinding = true
    }
}

dependencies {
    implementation fileTree(dir: "libs", include: ["*.jar"])
    implementation "org.jetbrains.kotlin:kotlin-stdlib:1.4.21"
    implementation 'androidx.core:core-ktx:1.3.2'
    implementation 'androidx.appcompat:appcompat:1.2.0'
    implementation 'androidx.recyclerview:recyclerview:1.1.0'
    implementation 'androidx.constraintlayout:constraintlayout:2.0.4'
    implementation 'androidx.cardview:cardview:1.0.0'
    implementation 'com.google.android.material:material:1.3.0'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.4.0'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-android:1.4.0'

    // fragmentライブラリ
    def fragment_version = "1.3.1"
    implementation "androidx.fragment:fragment-ktx:$fragment_version"
    debugImplementation "androidx.fragment:fragment-testing:$fragment_version"

    // roomライブラリ
    def room_version = "2.2.6"
    implementation "androidx.room:room-runtime:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    kapt "androidx.room:room-compiler:$room_version"

    // lifecycleライブラリ
    def archLifecycleVersion = '2.3.0'
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:$archLifecycleVersion"
    implementation "androidx.lifecycle:lifecycle-common-java8:$archLifecycleVersion"

    // koinライブラリ
    def koin_version = '2.2.2'
    implementation "org.koin:koin-android:$koin_version"
    implementation "org.koin:koin-androidx-scope:$koin_version"
    implementation "org.koin:koin-androidx-viewmodel:$koin_version"

    // licenses activity生成
    implementation 'com.google.android.gms:play-services-oss-licenses:17.0.0'
}

// 自動登録されないOSSライセンスを追加するタスク
task addOssLicenseTask {
    // generateLicensesタスクの直後に起動
    mustRunAfter tasks.findByName('generateLicenses')
    doLast {
        modifyOssLicense(project)
    }
}

// OSSライセンスを変更する
static def modifyOssLicense(project)
{
    final String UTF_8 = "UTF-8"
    final byte[] LINE_SEPARATOR = System.getProperty("line.separator").getBytes(UTF_8)

    def dependencyOutput = new File(project.buildDir, "generated/third_party_licenses")
    def resourceOutput = new File(dependencyOutput, "/res")
    def outputDir = new File(resourceOutput, "/raw")

    // ライセンスファイル
    def licensesFile = new File(outputDir, "third_party_licenses")

    // ライセンスファイルへの書き込み前に現在の位置を保持
    def start = licensesFile.length()

    // ライセンスファイルへ書き込み
    def licenseContentFile = new URL("https://www.apache.org/licenses/LICENSE-2.0.txt").text
    licensesFile << licenseContentFile
    licensesFile << (LINE_SEPARATOR)

    def licensesText = licensesFile.text

    List<String> metaData =  []
    // ライセンスメタデータファイル
    def licensesMetadataFile = new File(outputDir, "third_party_license_metadata")
    for (entry in licensesMetadataFile)
    {
        def elements = entry.split()
        def packageName = ""
        entry.split().each {element->
            if(!element.contains(elements[0])){
                if(packageName != "") packageName+=" "
                packageName += element
            }
        }

        // メタファイル再構成リストに追加
        metaData.add("${getMetaStartLength(elements[0],licensesText,start)} ${packageName}")
    }

    // メタファイルの再生成
    licensesMetadataFile.newWriter().withWriter {w ->
        w << ''
    }

    // リストからメタファイルを再作成
    metaData.each { data->
        licensesMetadataFile << (data)
        licensesMetadataFile << (LINE_SEPARATOR)
    }

}

// メタファイル用スタート位置と長さの文字列を取得
static def getMetaStartLength(startLengthElement, licenseText, apacheL2start){
    def startLength = startLengthElement.split(":")
    def start = Integer.parseInt(startLength[0])
    def end = start + Integer.parseInt(startLength[1])
    def text = licenseText.substring(start,end)

    if(text.contains("www.apache.org/licenses/LICENSE-2.0.txt")){
        return "${(int)apacheL2start}:${licenseText.length()}"
    }

    return startLengthElement
}


// preBuild前にライセンス情報を追加する
tasks.findByPath(':app:preBuild').dependsOn addOssLicenseTask